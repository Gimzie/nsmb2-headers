{
	"Enemy Template": {
	"prefix": "ActorCollision",
	"body": [
		"#include \"actors/${2:ActorCollision}.h\"",
		"",
		"#include \"actors/Enemy.h\"",
        "#include \"course/ProfileId.h\"",
        "#include \"gfx/Renderer.h\"",
        "",
        "",
		"class ${1:$TM_FILENAME_BASE}: public ${2:ActorCollision}",
		"{",
		"public:",
		"    DECLARE_PROC_GLUE_CODE(${1:$TM_FILENAME_BASE});",
		"    static sead::SafeString resources[];",
		"    static ActorInfo info;",
		"    ",
		"    int onCreate() override;",
		"    int onDelete() override;",
		"    int onExecute() override;",
		"    int onDraw() override;",
		"",
		"    void createModel();",
        "",
        "    HeapAllocator allocator;",
        "    Resource* resource;",
        "    AnimModelBase* model;",
        "",
        "    static const bool someFlag;",
		"};",
		"",
		"CREATE_PROC_GLUE_CODE(${1:$TM_FILENAME_BASE});",
		"",
		"sead::SafeString ${1:$TM_FILENAME_BASE}::resources[] =",
		"{",
		"    \"${3:ResName}\",",
		"    \"\"",
		"};",
		"",
		"ActorInfo ${1:$TM_FILENAME_BASE}::info =",
		"{",
		"    { 0, 0 },",
		"    { 0, 0 },",
		"    { 0, 0 },",
		"    { 0, 0, 0, 0 },",
        "    ActorInfo::SPAWNFLAG_NORMAL,",
		"    ActorInfo::FLAG_NORMAL",
		"};",
		"",
		"",
		"RegisterStageProfile<${1:$TM_FILENAME_BASE}> ${1:$TM_FILENAME_BASE}Profile",
		"(",
		"    ProfileId::${1:$TM_FILENAME_BASE}, \"${1:$TM_FILENAME_BASE}\",",
		"    ProfileId::${1:$TM_FILENAME_BASE}, ProfileId::${1:$TM_FILENAME_BASE},",
		"    &${1:$TM_FILENAME_BASE}::info,",
		"    ${1:$TM_FILENAME_BASE}::resources, RES_LOAD_MODE_COURSE,",
		"    SOUND_ACTOR_TYPE_NORMAL",
		");",
		"",
		"",
		"int ${1:$TM_FILENAME_BASE}::onCreate()",
		"{",
        "",
		"    ActorCollisionCheck::Info info = { };",
        "    info.centerOffset = { 0.0f, 0.0f };",
        "    info.halfSize   = { 0.0f, 0.0f };",
        "    info.type = ActorCollisionCheck::TYPE_GENERIC;",
        "    info.typeMask = ActorCollisionCheck::TYPE_MASK_GENERIC | ActorCollisionCheck::TYPE_MASK_PLAYER |",
        "                    ActorCollisionCheck::TYPE_MASK_ENEMY;",
        "    info.attack = ActorCollisionCheck::ATTACK_GENERIC;",
        "    info.attackMask = ActorCollisionCheck::ATTACK_MASK_GENERIC;",
        "    info.callback = &Enemy::collisionCallback;",
        "    aCollisionCheck.set(this, info);",
        "    ActorCollisionCheckMgr::instance->addToList(&aCollisionCheck);",
        "",
        "    ActorBgCollisionCheck::Sensor below    = { -4.0f,  4.0f,  0.0f };",
        "    ActorBgCollisionCheck::Sensor above    = {  0.0f,  0.0f, 16.0f };",
        "    ActorBgCollisionCheck::Sensor adjacent = {  6.0f, 24.0f, 10.0f };",
        "    collisionCheck.init(this, &below, &above, &adjacent);",
        "",
        "    createModel();",
        "",
		"    return 2;",
		"}",
		"",
		"int ${1:$TM_FILENAME_BASE}::onDelete()",
		"{",
        "    if (model)",
        "    {",
        "        model->cleanup();",
        "        delete model;",
        "    }",
        "",
		"    return 2;",
		"}",
		"",
		"int ${1:$TM_FILENAME_BASE}::onExecute()",
		"{",
        "    collisionCheck.process();",
        "",
        "    updateModelMatrix(model);",
        "    cullCheck();",
        "",
		"    return 2;",
		"}",
		"",
		"int ${1:$TM_FILENAME_BASE}::onDraw()",
		"{",
        "    Renderer::instance()->drawModel(model);",
		"    return 2;",
		"}",
		"",
		"void ${1:$TM_FILENAME_BASE}::createModel()",
		"{",
		"    allocator.link(ActorHeap);",
        "",
		"    resource = ResourceMgr::instance->getResource(\"${3:ResName}\");",
		"    nw::gfx::res::ResModel resModel = resource->bcres.GetModels(\"some_model\");",
        "",
		"    model = new(allocator.heap) AnimModel<1,0,0>();",
		"    model->setup(&resModel, nullptr, &allocator, resource, resource);",
		"}",
		"",
	],
	"description": "Creates code for an actor with collision"
}
}
