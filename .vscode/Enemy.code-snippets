{
    "Enemy Template": {
    "prefix": "Enemy",
    "body": [
        "#include \"actors/${2:Enemy}.h\"",
        "",
        "#include \"course/ProfileId.h\"",
        "#include \"gfx/Renderer.h\"",
        "",
        "",
        "class ${1:$TM_FILENAME_BASE}: public ${2:Enemy}",
        "{",
        "public:",
        "    DECLARE_PROC_GLUE_CODE(${1:$TM_FILENAME_BASE});",
        "    static sead::SafeString resources[];",
        "    static ActorInfo info;",
        "    ",
        "    int onCreate() override;",
        "    int onDelete() override;",
        "    int onExecute() override;",
        "    int onDraw() override;",
        "",
        "    void collisionPlayer(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck) override;",
        "    void collisionEnemy(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck) override;",
        "",
        "    // Remove any of these you don't need to override",
        "    bool collisionStarMega(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck) override;",
        "    bool collisionSlide(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck) override;",
        "    bool collisionGroundPound(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck) override;",
        "    bool collisionShell(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck) override;",
        "    bool collisionFireball(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck) override;",
        "",
        "    void createModel();",
        "",
        "    HeapAllocator allocator;",
        "    Resource* resource;",
        "    AnimModelBase* model;",
        "",
        "    static const bool someFlag;",
        "",
        "    DECLARE_STATE_VIRTUAL_ID_OVERRIDE(${1:$TM_FILENAME_BASE}, DieBigFall);",
        "    DECLARE_STATE_ID(${1:$TM_FILENAME_BASE}, XYZ);",
        "};",
        "",
        "CREATE_PROC_GLUE_CODE(${1:$TM_FILENAME_BASE});",
        "",
        "CREATE_STATE_VIRTUAL_ID_OVERRIDE(${1:$TM_FILENAME_BASE}, Enemy, DieBigFall);",
        "CREATE_STATE_ID(${1:$TM_FILENAME_BASE}, XYZ);",
        "",
        "sead::SafeString ${1:$TM_FILENAME_BASE}::resources[] =",
        "{",
        "    \"${3:ResName}\",",
        "    \"\"",
        "};",
        "",
        "ActorInfo ${1:$TM_FILENAME_BASE}::info =",
        "{",
        "    { 0, 0 },",
        "    { 0, 0 },",
        "    { 0, 0 },",
        "    { 0, 0, 0, 0 },",
        "    ActorInfo::SPAWNFLAG_NORMAL,",
        "    ActorInfo::FLAG_NORMAL",
        "};",
        "",
        "",
        "RegisterStageProfile<${1:$TM_FILENAME_BASE}> ${1:$TM_FILENAME_BASE}Profile",
        "(",
        "    ProfileId::${1:$TM_FILENAME_BASE}, \"${1:$TM_FILENAME_BASE}\",",
        "    ProfileId::${1:$TM_FILENAME_BASE}, ProfileId::${1:$TM_FILENAME_BASE},",
        "    &${1:$TM_FILENAME_BASE}::info,",
        "    ${1:$TM_FILENAME_BASE}::resources, RES_LOAD_MODE_COURSE,",
        "    SOUND_ACTOR_TYPE_NORMAL",
        ");",
        "",
        "",
        "int ${1:$TM_FILENAME_BASE}::onCreate()",
        "{",
        "",
        "    ActorCollisionCheck::Info info = { };",
        "    info.centerOffset = { 0.0f, 0.0f };",
        "    info.halfSize   = { 0.0f, 0.0f };",
        "    info.type = ActorCollisionCheck::TYPE_ENEMY;",
        "    info.typeMask = ActorCollisionCheck::TYPE_MASK_PRESET_ENEMY;",
        "    info.attack = ActorCollisionCheck::ATTACK_GENERIC;",
        "    info.attackMask = ActorCollisionCheck::ATTACK_MASK_PRESET_ALL;",
        "    info.callback = &Enemy::collisionCallback;",
        "    aCollisionCheck.set(this, info);",
        "    ActorCollisionCheckMgr::instance->addToList(&aCollisionCheck);",
        "",
        "    ActorBgCollisionCheck::Sensor below    = { -4.0f,  4.0f,  0.0f };",
        "    ActorBgCollisionCheck::Sensor above    = {  0.0f,  0.0f, 16.0f };",
        "    ActorBgCollisionCheck::Sensor adjacent = {  6.0f, 24.0f, 10.0f };",
        "    collisionCheck.init(this, &below, &above, &adjacent);",
        "",
        "    createModel();",
        "",
        "    return 2;",
        "}",
        "",
        "int ${1:$TM_FILENAME_BASE}::onDelete()",
        "{",
        "    if (model)",
        "    {",
        "        model->cleanup();",
        "        delete model;",
        "    }",
        "",
        "    return 2;",
        "}",
        "",
        "int ${1:$TM_FILENAME_BASE}::onExecute()",
        "{",
        "    stateMgr.executeState();",
        "    collisionCheck.process();",
        "",
        "    updateModelMatrix(model);",
        "    cullCheck();",
        "",
        "    return 2;",
        "}",
        "",
        "int ${1:$TM_FILENAME_BASE}::onDraw()",
        "{",
        "    Renderer::instance()->drawModel(model);",
        "    return 2;",
        "}",
        "",
        "",
        "void ${1:$TM_FILENAME_BASE}::collisionPlayer(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck){}",
        "",
        "void ${1:$TM_FILENAME_BASE}::collisionEnemy(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck){}",
        "",
        "",
        "// Remove any of these you don't need to override",
        "bool ${1:$TM_FILENAME_BASE}::collisionStarMega(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck){}",
        "",
        "bool ${1:$TM_FILENAME_BASE}::collisionSlide(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck){}",
        "",
        "bool ${1:$TM_FILENAME_BASE}::collisionGroundPound(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck){}",
        "",
        "bool ${1:$TM_FILENAME_BASE}::collisionShell(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck){}",
        "",
        "bool ${1:$TM_FILENAME_BASE}::collisionFireball(ActorCollisionCheck* thisCheck, ActorCollisionCheck* otherCheck){}",
        "",
        "",
        "void ${1:$TM_FILENAME_BASE}::createModel()",
        "{",
        "    allocator.link(ActorHeap);",
        "",
        "    resource = ResourceMgr::instance->getResource(\"${3:ResName}\");",
        "    nw::gfx::res::ResModel resModel = resource->bcres.GetModels(\"some_model\");",
        "",
        "    model = new(allocator.heap) AnimModel<1,0,0>();",
        "    model->setup(&resModel, nullptr, &allocator, resource, resource);",
        "}",
        "",
        "",
        "void ${1:$TM_FILENAME_BASE}::initializeState_DieBigFall() { Enemy::initializeState_DieBigFall(); }",
        "",
        "void ${1:$TM_FILENAME_BASE}::executeState_DieBigFall() { Enemy::executeState_DieBigFall(); }",
        "",
        "void ${1:$TM_FILENAME_BASE}::finalizeState_DieBigFall() { Enemy::finalizeState_DieBigFall(); }",
        "",
        "",
    ],
    "description": "Creates code for an enemy"
}
}
